
#include "package.fc";
#include "storage.fc";


(int) get_available_for_claim_amount() inline method_id {

    int jetton_locked_balance = storage::vesting_total_amount;

    (int vesting_start_time, int cliff_duration, int vesting_total_duration, 
        int unlock_period, int initially_unlocked_percentage) = package::unpack_vesting_and_cliff_data(storage::vesting_and_cliff_data);

    int released_until_now = 0;
    int now_time = now();

    if (now_time < vesting_start_time) {
        ;; do not get anything
        released_until_now = 0;
    } elseif (now_time >= (vesting_start_time + vesting_total_duration)) {
        ;; get everything
        released_until_now = storage::vesting_total_amount;
    } elseif (now_time <= (vesting_start_time + cliff_duration)) {
        ;; during cliff get fixed percentage
        released_until_now = jetton_locked_balance * initially_unlocked_percentage / 100;

    } else {
        ;; after cliff get for periods
        int unlocked_during_cliff = jetton_locked_balance * initially_unlocked_percentage / 100;     
        int unlocked_amount_per_each_period = (jetton_locked_balance - unlocked_during_cliff) / ((vesting_total_duration - cliff_duration) / unlock_period);
        int periods_passed_amount = (now_time - (vesting_start_time + cliff_duration)) / unlock_period;

        released_until_now = unlocked_during_cliff + unlocked_amount_per_each_period * periods_passed_amount;
    }

    int available_for_claim = released_until_now - storage::claimed_amount;
    return available_for_claim;
}


(int, int, slice, slice, cell, int, int, cell, int, int) get_storage_data() method_id {
    storage::load_data();
    return (
        storage::init?,
        storage::collection_index, 
        storage::collection_address, 
        storage::owner_address,
        storage::content,

        storage::vesting_total_amount,
        storage::claimed_amount,

        storage::vesting_and_cliff_data,
        storage::is_active,
        storage::is_transferable
    );
}

(int, int, slice, slice, cell) get_nft_data() method_id {
    storage::load_data();
    return (storage::init?, storage::collection_index, storage::collection_address, storage::owner_address, storage::content);
}
