#pragma version >=0.4.0;
#include "../imports/stdlib.fc";
#include "../imports/constants.fc";
#include "../imports/utils.fc";

#include "package.fc";
#include "storage.fc";
#include "get-methods.fc";
#include "utils.fc";

#include "address.fc";


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    storage::load_data();

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    ;; bounced ignored
    if (flags & 1) { 
        return ();
    }

    int fwd_fee = get_forward_fee(cs);

    if (storage::init? == 0) {
        throw_unless(405, address::is_collection_address(sender_address));
        
        in_msg_body~skip_bits(64); ;; skip next_item_index
        storage::owner_address = in_msg_body~load_msg_addr();
        storage::vesting_total_amount = in_msg_body~load_coins();
        storage::claimed_amount = 0;
        storage::vesting_and_cliff_data = in_msg_body~load_ref();
        utils::unfreeze_safe();
        storage::is_transferable = in_msg_body~load_uint(1);


        storage::save_data();
        return ();
    }


    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer_safe) {  
        utils::transfer_ownership(my_balance, sender_address, query_id, in_msg_body, fwd_fee, storage::is_transferable);
        return ();
    }

    if (op == op::claim_safe) {
        
        throw_unless(exc::incorrect_sender, address::is_owner_address(sender_address));
        throw_unless(exc::already_claimed, utils::is_unfreezed());
        throw_unless(exc::out_of_gas, msg_value >= gas::claim_safe);

        int available_for_claim = get_available_for_claim_amount();
        int future_claimed_amount = storage::claimed_amount + available_for_claim;

        send_claim_message(op, query_id, available_for_claim, future_claimed_amount);
        
        utils::freeze_safe();
        storage::save_data();
        return();
    }

    if (op == op::change_state_safe) {
        throw_unless(exc::incorrect_sender, address::is_collection_address(sender_address));

        utils::unfreeze_safe();
        storage::claimed_amount = in_msg_body~load_coins(); ;; get new value

        storage::save_data();
        return();
    }

    throw(0xffff);
}



